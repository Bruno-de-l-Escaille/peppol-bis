<?xml version="1.0" encoding="UTF-8"?>
<!--suppress AntResolveInspection -->
<project name="PEPPOL-BIS" basedir="." default="compile">

    <property name="agent.name" value="Manual generated"/>
    <!-- build.number is a property set by the build server (TeamCity) -->
    <!--<property name="build.number" value="DEV"/>-->
    <tstamp>
        <format property="build.time" pattern="yyyyMMdd_HHmmss" locale="en,GB"/>
    </tstamp>
    <property name="version.number" value="3.1.0_RC2"/>
    <!-- Format of version.releaseDate must be yyyy-mm-dd -->
    <!--<property name="version.releaseDate" value="2015-09-15"/>-->

    <property name="sch.dir" value="../2.0/Documents"/>
    <property name="test.dir" value="../2.0/Test"/>
    <property name="target.dir" value="../target"/>
    <property name="target.xslt" value="${target.dir}/XSLT"/>
    <property name="test.output" value="${target.dir}/test-output_${version.number}.log"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="clean">
        <delete dir="../target"/>
    </target>

    <target name="init" depends="setBuildNumber.normal">
        <echo message="##teamcity[buildNumber '${local.build.number}']"/>
        <mkdir dir="${target.xslt}"/>
    </target>

    <target name="injectVersionNumber">
        <replaceregexp file="Build/iso_schematron_skeleton_oioubl.xsl"
                       match="name=&#34;dateRelease&#34; select=&#34;.*?'&#34;"
                       replace="name=&#34;dateRelease&#34; select=&#34;', ${version.releaseDate}, Version ${version.number}'&#34;"
                       byline="true"/>
    </target>

    <target name="compile" depends="clean, init">
        <foreach target="compileDocumentType" param="documentType">
            <path>
                <dirset dir="../2.0/Documents">
                    <include name="*"/>
                </dirset>
            </path>
        </foreach>
    </target>

    <target name="compileDocumentType" depends="dir.check" if="dir.exists">
        <basename property="baseDocumentType" file="${documentType}"/>
        <!--<echo message="${documentType}"/>-->
        <foreach target="compileSchFile" param="schFile">
            <path>
                <fileset dir="${documentType}/Schematron/">
                    <include name="*/*.sch"/>
                    <!--<exclude name="*/BIICORE*.sch"/>-->
                </fileset>
            </path>
        </foreach>
    </target>

    <target name="compileSchFile">
        <basename property="baseName" file="${schFile}" suffix=".sch"/>
        <echo message="##teamcity[compilationStarted compiler='${baseName}' flowId='12321']"/>

        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${schFile}"/>
            <arg value="-xsl:iso-schematron-xslt2/iso_dsdl_include.xsl"/>
            <arg value="-o:${target.xslt}/${baseName}.step1.xsl"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

        <echo message="SCH: Staring step 2..."/>
        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${target.xslt}/${baseName}.step1.xsl"/>
            <arg value="-xsl:iso-schematron-xslt2/iso_abstract_expand.xsl"/>
            <arg value="-o:${target.xslt}/${baseName}.step2.xsl"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

        <echo message="SCH: Staring step 3..."/>
        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${target.xslt}/${baseName}.step2.xsl"/>
            <!--<arg value="-xsl:iso-schematron-xslt2/iso_schematron_skeleton_for_saxon.xsl"/>-->
            <arg value="-xsl:iso-schematron-xslt2/iso_svrl_for_xslt2.xsl"/>
            <arg value="-o:${target.xslt}/${baseName}.step3.xsl"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

        <move file="${target.xslt}/${baseName}.step3.xsl" tofile="${target.xslt}/${baseName}.xsl"/>
        <delete file="${target.xslt}/${baseName}.step1.xsl"/>
        <delete file="${target.xslt}/${baseName}.step2.xsl"/>
        <echo message="##teamcity[compilationFinished compiler='${baseName}' flowId='12321']"/>
    </target>

    <target name="dir.check">
        <condition property="dir.exists">
            <available file="${documentType}/Schematron" type="dir"/>
        </condition>
    </target>

    <target name="makeZip" depends="compile" description="Make ZIP for release">
        <!-- Make version-info file -->
        <echo message="VERSION INFORMATION${line.separator}" file="${target.dir}/version-info.txt" append="true"/>
        <echo message="-------------------${line.separator}" file="${target.dir}/version-info.txt" append="true"/>
        <echo message="This ZIP contains the official OpenPEPPOL Validation Artifacts (XSLT + SCH files) for BIS 2.0 documents.${line.separator}" file="${target.dir}/version-info.txt" append="true"/>
        <echo message="Version   : ${version.number}${line.separator}" file="${target.dir}/version-info.txt" append="true"/>
        <echo message="Build time: ${build.time}${line.separator}" file="${target.dir}/version-info.txt" append="true"/>
        <echo message="GIT number: ${build.number}${line.separator}" file="${target.dir}/version-info.txt" append="true"/>

        <zip destfile="${target.dir}/BIS2.0-VA-V${local.build.number}.zip">
            <zipfileset dir="${target.xslt}" includes="*.xsl" prefix="XSLT"/>
            <!-- excludes="**/BIICORE*.sch" removed for RC2 -->
            <zipfileset dir="${sch.dir}" includes="**/*.sch" prefix="SCH"/>
            <zipfileset dir="../2.0/Documentation" includes="*V${version.number}.pdf"/>
            <zipfileset dir="${target.dir}" includes="*.txt"/>
        </zip>
    </target>

    <target name="test" depends="" description="Run all tests">
        <delete>
            <fileset dir="${target.dir}" includes="*.log"/>
        </delete>

        <!-- For each test folder-->
        <foreach target="executeTest" param="testFile" inheritall="true">
            <path>
                <fileset dir="../2.0/Documents/">
                    <filename name="**/Tests/T*-*.xml"/>
                    <exclude name="**/Tests/TB*.xml"/>
                </fileset>
            </path>
        </foreach>
        <delete file="${target.dir}/schematron-output.xml"/>

        <!--Check if errors exists-->
        <fileset id="matches" file="${test.output}">
            <contains text="ERROR"/>
        </fileset>

        <!--<fail message="Found ERRORS in tests">-->
        <!--<condition>-->
        <!--<resourcecount when="greater" count="0" refid="matches"/>-->
        <!--</condition>-->
        <!--</fail>-->
    </target>

    <target name="parseTestFilePath">
        <script language="javascript">
            // testSuite stuff
            oldDocType = project.getProperty('docType');
            <!--echo = project.createTask("echo");-->
            <!--echo.setMessage("TEST..................................................... " + project.getProperty('docType'));-->
            <!--echo.setMessage("TEST..................................................... " + docType);-->
            <!--echo.perform( );-->

            // Find DocumentType
            filePath = project.getProperty('testFile');
            documentStartPos = filePath.indexOf('Documents\\');
            docType = filePath.substring(documentStartPos+10, documentStartPos+13);
            project.setProperty('docType', docType);
        </script>
        <basename property="testFile.base" file="${testFile}"/>
    </target>

    <target name="executeTest" depends="parseTestFilePath, schematronValidateFile">
        <!--<echo message="FILE: ${testFile}"/>-->
        <loadfile property="testFile.content" srcfile="${testFile}"/>
        <loadfile property="validationOutput.BII" srcfile="${target.dir}/schematron-BIIRULES-output.xml"/>
        <loadfile property="validationOutput.PEPPOL" srcfile="${target.dir}/schematron-OPENPEPPOL-output.xml"/>

        <script language="javascript"><![CDATA[
            // Parse test file for ERRORS and WARNINGS
            content = project.getProperty('testFile.content');
            commentStart = content.indexOf('<!--');
            commentEnd = content.indexOf('-->');
            commentLineArray = content.substring(commentStart, commentEnd).split('\n');
            var headlineFound = false;
            // Find ERRORS
            var errorArr = [];
            for (i=0; commentLineArray.length > i; i++) {
                if ( commentLineArray[i]!=null && commentLineArray[i].trim().indexOf('Error')==0 ) {
                    headlineFound = true;
                    continue;
                }
                if ( headlineFound ) {
                    if ( commentLineArray[i]!=null && commentLineArray[i].trim().length() > 0  && commentLineArray[i].trim()!='None') {
                        lineArr = commentLineArray[i].trim().split(' ');
            <!--echo = project.createTask("echo");-->
            <!--echo.setMessage("TEST..................................................... " + commentLineArray[i].trim().split(' '));-->
            <!--echo.perform( );-->
                        errorArr.push(lineArr[0])
                    } else {
                        break;
                    }
                }
            }
            // Find WARNINGS
            var warningArr = [];
            headlineFound = false;
            for (i=0; commentLineArray.length > i; i++) {
                if ( commentLineArray[i]!=null && commentLineArray[i].trim().indexOf('Warning')==0 ) {
                    headlineFound = true;
                    continue;
                }
                if ( headlineFound ) {
                    if ( commentLineArray[i]!=null && commentLineArray[i].trim().length() > 0 && commentLineArray[i].trim()!='None' ) {
                        warningArr.push(commentLineArray[i].trim())
                    } else {
                        break;
                    }
                }
            }
            <!--echo = project.createTask("echo");-->
            <!--echo.setMessage("TEST..................................................... " + warningArr.length);-->
            <!--echo.perform();-->


            // Verify that errors+warnings exists in schematron output
            var escapeChars = ["[", "]", "'"];
            validationOutput_BII = project.getProperty('validationOutput.BII');
            validationOutput_PEPPOL = project.getProperty('validationOutput.PEPPOL');
            // Errors
            for (i=0; errorArr.length > i; i++) {
                // if error code start with BII, when use BII schematron output
                testType = (errorArr[i].indexOf('OP')==0 || errorArr[i].indexOf('EUGEN')==0) ? 'OPENPEPPOL' : 'BIIRULES';
                validationOutput = testType=='BIIRULES' ? validationOutput_BII : validationOutput_PEPPOL;

                if ( validationOutput.indexOf(errorArr[i]) == -1 ) {
                    <!--for (var i = 0; escapeChars.length > i; i++) {-->
                        <!--errorArr[i] = errorArr[i].replace(escapeChars[i], "|"+escapeChars[i]);-->
                    <!--}-->

                    project.setProperty('test.errorCode', errorArr[i]);
                    project.setProperty('test.reason', "Error " + errorArr[i] + " not found in schematron output");
                    project.setProperty('test.result', "error");
                    project.setProperty('test.type', testType);
                    project.setProperty('validationOutput', validationOutput);
                    break;
                }
            }

            // Warnings
            for (i=0; warningArr.length > i; i++) {
                // if warning code start with BII, when use BII schematron output
                testType = (warningArr[i].indexOf('BII')==0) ? 'BIIRULES' : 'OPENPEPPOL';
                validationOutput = testType=='BIIRULES' ? validationOutput_BII : validationOutput_PEPPOL;

                if ( validationOutput.indexOf(warningArr[i]) == -1 ) {
                    <!--for (var i = 0; escapeChars.length > i; i++) {-->
                        <!--warningArr[i] = warningArr[i].replace(escapeChars[i], "|"+escapeChars[i]);-->
                    <!--}-->

                    project.setProperty('test.errorCode', warningArr[i]);
                    project.setProperty('test.reason', "Error " + warningArr[i] + " not found in schematron output");
                    project.setProperty('test.result', "error");
                    project.setProperty('test.type', testType);
                    project.setProperty('validationOutput', validationOutput);
                    break;
                }
            }


            // Test for no errors expected
            // If no errors expected and "failed-assert" is found - then fail test
            // BIIRULES
            if (errorArr.length == 0 && warningArr.length==0 && validationOutput_BII.indexOf("failed-assert") > 0 ) {
                project.setProperty('test.result', "error");
                project.setProperty('test.reason', "Error(s) found in BIIRULES output, where no errors were expected");
                project.setProperty('test.errorCode', "no errors");
                project.setProperty('test.type', 'BIIRULES');
                project.setProperty('validationOutput', validationOutput_BII);
            }

            // OPENPEPPOL
            if (errorArr.length == 0 && warningArr.length==0 && validationOutput_PEPPOL.indexOf("failed-assert") > 0 ) {
                project.setProperty('test.result', "error");
                project.setProperty('test.reason', "Error(s) found in OPENPEPPOL output, where no errors were expected");
                project.setProperty('test.errorCode', "no errors");
                project.setProperty('test.type', 'OPENPEPPOL');
                project.setProperty('validationOutput', validationOutput_PEPPOL);
            }
        ]]></script>
        <if>
            <equals arg1="${test.result}" arg2="error"/>
            <then>
                <echo message="##teamcity[testFailed name='${test.name}' message='${test.reason}' flowId='12321']"/>

                <echo message="ERROR: Output from ${test.type} schematron validation of the file ${testFile.base} - expected ${test.errorCode}:${line.separator}"
                      file="${test.output}" append="true"/>
                <echo message="${validationOutput}${line.separator}${line.separator}" file="${test.output}" append="true"/>
            </then>
        </if>
        <echo message="##teamcity[testFinished name='${test.name}' flowId='12321']"/>
        <echo message="##teamcity[testSuiteFinished name='${docType}' flowId='12321']"/>
    </target>

    <target name="schematronValidateFile">
        <!--<property name="test.name" value="${docType}.${testFile.base}" environment=""/>-->
        <property name="test.name" value="${testFile.base}" environment=""/>

        <echo message="##teamcity[testSuiteStarted name='${docType}' flowId='12321']"/>
        <echo message="##teamcity[testStarted name='${test.name}' flowId='12321']"/>
        <!-- SAXON options: http://www.saxonica.com/documentation9.5/using-xsl/commandline.html -->
        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${testFile}"/>
            <arg value="-xsl:${target.xslt}/BIIRULES-UBL-${docType}.xsl"/>
            <arg value="-o:${target.dir}/schematron-BIIRULES-output.xml"/>
            <arg value="-warnings:silent"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${testFile}"/>
            <arg value="-xsl:${target.xslt}/OPENPEPPOL-UBL-${docType}.xsl"/>
            <arg value="-o:${target.dir}/schematron-OPENPEPPOL-output.xml"/>
            <arg value="-warnings:silent"/>
            <jvmarg line="-Xmx2048m"/>
        </java>
    </target>

    <!-- build-all is intended for build server. -->
    <target name="build-all" depends="clean, compile, test, makeZip"/>
    <target name="release" depends="setBuildNumber.release, makeZip"/>

    <target name="setBuildNumber.release">
        <property name="local.build.number" value="${version.number}"/>
    </target>

    <target name="setBuildNumber.normal">
        <property name="local.build.number" value="${version.number}.${build.time}"/>
    </target>

</project>
